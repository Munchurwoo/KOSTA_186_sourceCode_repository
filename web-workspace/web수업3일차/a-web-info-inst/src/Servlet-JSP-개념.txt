**Servlet&JSP 개념정리**

HTTP : HyperText Transfer Protocol 
WAS : Web Application Server 
		( Web Server + Web Container ) 
		Web Server - http service 
		Web Container - Servlet&JSP 실행환경을 제공 
Web Browser :  http 에 의거해 
				   http header 정보를  해석하고, 	
                   body 부분의 html(javascript,css) 를 해석해 웹화면을 제공 	
 HTML : HyperText Markup Language 
 		  웹 페이지의 컨텐트를 담당 
 JavaScript : 웹 페이지의 행위를 담당 
 				(최근에는 서버 사이드에서도 역할을 한다)
 CSS : 웹 페이지의 디자인 스타일을 담당 
 		                    
 web.xml : DD - Deployment Descriptor ( 배포 기술서 ) 
 			  웹 어플리케이션의 설정정보를 기술 
 			  -> WAS 가 해당 웹어플리케이션 처음 실행할 때 
 			      해당 파일(web.xml)을 읽어서 로딩한다     
 			      
 			sample code )  특정 서블릿에 대한 web.xml 설정 
 			<servlet>
		  	<servlet-name>hello</servlet-name>
		  	<servlet-class>step1.HelloServlet</servlet-class>
		    </servlet>
			 <servlet-mapping>
			 <servlet-name>hello</servlet-name>
			 <url-pattern>/hello</url-pattern>
			  </servlet-mapping>      
 			      
 			      
 			                    
 Servlet : 자바 웹 어플리케이션을 위한 기술 
 			java class 내에서 html을 명시 
 			이후 Model2 Architecture (MVC Pattern) 에서는 
 			Controller 영역의 주 기술이 된다 
 JSP :  자바 서버 페이지 
 		 html 에서 java code를 명시 
 		 자바 웹 페이지 개발을 위한 기술 
 		 웹컨테이너에 의해 서블릿으로 변환되어 실행된다 		
 		 이후 Model2 Architecture (MVC Pattern) 에서는 
 		 View 영역의 주 기술이 된다 	                  
                   
 HTTP Request Method ( 요청 방식 )
 Get 요청방식 :  정보 조회 용도 
 					  url 에 노출 
 					 대용량 데이터 전송에는 적합하지 않다 
 					  
 Post 요청방식 : 정보 전송 용도  	( 로그인 , 회원 가입 , 대용량 데이터 ) 	
 					 url에 노출 x 
 					 
 HTTP status   200 정상수행 
                  404  not found   요청 자료가 서버에 존재하지 않을 때  
                  405 not allowed  요청 메서드를 처리할 자원이 없을 때 					 
 				  500 Internal Server Error  서버 프로그램 에러 및 예외  
 					 
 서블릿 라이프 사이클 ( Servlet Life Cycle ) 
 그림참고 
 라이프사이클 관련 주요 메서드 ( Servlet Interface의 abstract method ) 
 1)  init() : 해당 서블릿에 대한 요청시 단 한번 실행 
 2)  service() : 클라이언트 요청시마다 매번 실행 
 3)  destroy() : 웹컨테이너 종료전(서비스 해제전) 한번 실행 
 
 ex)   LoginServlet 으로 클라이언트 100명이 접속하여 로그인했다 
 	   LoginServlet 객체 생성 : 1  번
 	   LoginServlet init() 실행 :  1 번 
 	   LoginServlet service() 실행 : 100번 
 	   LoginServlet destroy() 실행 : 번(모름, 서비스 중이면 0번)   						 
 					 
 ServletConfig : 서블릿 객체 당 하나 생성 
 				   웹 컨테이너에 의해 init() 실행시 주입된다 	
 				   해당 서블릿이 실행하는 데 필요한 설정정보 
 	ex)  Spring Framework에서 제공하는 서블릿인 
 		  DispatcherServlet은 자신의 설정파일(spring 설정) 위치를 필요로 한다 
 		  이 때 개발자는 ServletConfig 의 init param 즉 초기 파라미터를
 		  이용해 spring 설정파일위치를 ServletConfig 객체에 저장해 
 		  전달할 수 있다 			   					 
 					 
 		  개발자 	  DD(web.xml)에 init-param을 추가 
 		  								------   스프링프레임워크 DispatcherServlet은 
 		  											ServletConfig의 init-param을 확인해서
 		  											스프링을 실행한다 
 		  															 
 ServletContext : 웹어플리케이션 당 하나 생성되는 객체 
 					 웹어플리케이션 내에 있는 모든 서블릿과 jsp들이 
 					 공유하는 자원 
 					 이 ServletContext 객체를 사용하기 위해서는 
 					 개별 Servlet 과 jsp 들은 ServletConfig 객체가 존재해야 한다
 	
 	ex)  사원(서블릿)들은 	각각 사원증(ServletConfig) 을 
 		 발급받는다. 이 발급받은 사원증이 있어야만 
 		 사내 카페와 체육시설, 사내 인트라넷(ServletContext:공유자원)을 
 		 이용할 수 있다 			 					 
 					 			                    
  ServletContextListener 
  웹어플리케이션 최초 실행과 종료 시점의 이벤트를 감지하여 
  최초 실행시 contextInitialized() 메서드를 실행하고
  종료 직전 contextDestroyed() 메서드를 실행하게 한다 
  
  contextInitialized() : 웹어플리케이션 차원의 초기 작업을 명시 
  contextDestroyed() : 웹어플리케이션 종료 전 수행해야 할 작업을 명시 
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   
                   	